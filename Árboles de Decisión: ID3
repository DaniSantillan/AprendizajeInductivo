from math import log2

# Función para calcular la entropía de un conjunto de datos
def calcular_entropia(data):
    etiquetas = set(data)
    entropia = 0
    for etiqueta in etiquetas:
        probabilidad = data.count(etiqueta) / len(data)
        entropia -= probabilidad * log2(probabilidad)
    return entropia

# Función para dividir el conjunto de datos en base a una característica
def dividir_datos(datos, caracteristica, valor):
    subset = [dato for dato in datos if dato[caracteristica] == valor]
    return subset

# Función para encontrar la mejor característica para dividir
def encontrar_mejor_caracteristica(datos, caracteristicas):
    entropia_inicial = calcular_entropia([dato['label'] for dato in datos])
    mejor_ganancia = 0
    mejor_caracteristica = None

    for caracteristica in caracteristicas:
        valores_posibles = set(dato[caracteristica] for dato in datos)
        ganancia = entropia_inicial

        for valor in valores_posibles:
            subset = dividir_datos(datos, caracteristica, valor)
            probabilidad = len(subset) / len(datos)
            ganancia -= probabilidad * calcular_entropia([dato['label'] for dato in subset])

        if ganancia > mejor_ganancia:
            mejor_ganancia = ganancia
            mejor_caracteristica = caracteristica

    return mejor_caracteristica

# Función recursiva para construir el árbol de decisión
def construir_arbol(datos, caracteristicas):
    etiquetas = [dato['label'] for dato in datos]

    # Si todos los ejemplos tienen la misma etiqueta, devolver esa etiqueta
    if etiquetas.count(etiquetas[0]) == len(etiquetas):
        return etiquetas[0]

    # Si no quedan características, devolver la etiqueta más común
    if len(caracteristicas) == 0:
        return max(set(etiquetas), key=etiquetas.count)

    # Encontrar la mejor característica para dividir
    mejor_caracteristica = encontrar_mejor_caracteristica(datos, caracteristicas)

    # Construir el árbol recursivamente
    subarboles = {}
    valores_posibles = set(dato[mejor_caracteristica] for dato in datos)
    for valor in valores_posibles:
        subset = dividir_datos(datos, mejor_caracteristica, valor)
        subarboles[valor] = construir_arbol(subset, [c for c in caracteristicas if c != mejor_caracteristica])

    return {mejor_caracteristica: subarboles}

# Datos de ejemplo
datos = [
    {'clima': 'soleado', 'temperatura': 'caliente', 'humedad': 'alta', 'label': 'no'},
    {'clima': 'soleado', 'temperatura': 'caliente', 'humedad': 'normal', 'label': 'no'},
    {'clima': 'nublado', 'temperatura': 'caliente', 'humedad': 'alta', 'label': 'si'},
    {'clima': 'lluvioso', 'temperatura': 'moderada', 'humedad': 'alta', 'label': 'si'},
    {'clima': 'lluvioso', 'temperatura': 'fria', 'humedad': 'alta', 'label': 'si'},
    {'clima': 'lluvioso', 'temperatura': 'fria', 'humedad': 'normal', 'label': 'no'},
    {'clima': 'nublado', 'temperatura': 'fria', 'humedad': 'normal', 'label': 'si'},
    {'clima': 'soleado', 'temperatura': 'moderada', 'humedad': 'alta', 'label': 'no'},
    {'clima': 'soleado', 'temperatura': 'fria', 'humedad': 'alta', 'label': 'si'},
    {'clima': 'lluvioso', 'temperatura': 'moderada', 'humedad': 'normal', 'label': 'si'},
    {'clima': 'soleado', 'temperatura': 'moderada', 'humedad': 'normal', 'label': 'si'},
    {'clima': 'nublado', 'temperatura': 'moderada', 'humedad': 'alta', 'label': 'si'},
    {'clima': 'nublado', 'temperatura': 'caliente', 'humedad': 'normal', 'label': 'si'},
    {'clima': 'lluvioso', 'temperatura': 'moderada', 'humedad': 'alta', 'label': 'no'}
]

# Características disponibles
caracteristicas_disponibles = ['clima', 'temperatura', 'humedad']

# Construir el árbol de decisión
arbol_decision = construir_arbol(datos, caracteristicas_disponibles)

# Mostrar el árbol de decisión
print(arbol_decision)
